package sample;

import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class Main extends Application {


    private boolean toSpawn = true;
    private Pane root;
    private Player player;
    private List<Blocks>  blocks = new ArrayList<>();
    private boolean moveLeft = false;
    private boolean moveRight = false;

    private Parent createContent() {
        root = new Pane();
        root.setPrefSize(300, 600);

        player = new Player(new Rectangle(40, 30, Color.BLUE));
        player.setVelocity(3);
        addPlayer(player, 130, 570);

        AnimationTimer timer = new AnimationTimer() {
            @Override
            public void handle(long now) {
                update();
            }
        };
        timer.start();

        return root;
    }

    public void addPlayer(Player p, double x, double y) {
        p.getView().setTranslateX(x);
        p.getView().setTranslateY(y);
        root.getChildren().add(p.getView());
    }

    public void addBlock(Blocks b, double x, double y) {
        b.setVelocity(5);
        blocks.add(b);
        b.getView().setTranslateX(x);
        b.getView().setTranslateY(y);
        root.getChildren().add(b.getView());
    }

    public void update() {

        if (moveLeft) {
            player.moveLeft();
        }

        if (moveRight) {
            player.moveRight();
        }

        blocks.forEach(Blocks::update);

        /*if(toSpawn){
            final SingleThrea exec = new ScheduledThreadPoolExecutor();
            exec.schedule(new Runnable() {
                @Override
                public void run() {
                    toSpawn = false;
                    addBlock(new Blocks(new Rectangle(50, 50, Color.RED)), Math.random() * (root.getPrefWidth()-50), -40);
                    toSpawn = true;
                }
            }, 2, TimeUnit.SECONDS);
        }*/

        if (Math.random() < 0.035) {
            addBlock(new Blocks(new Rectangle(50, 50, Color.RED)), Math.random() * (root.getPrefWidth()-50), -40);
        }
    }

    @Override
    public void start(Stage primaryStage) throws Exception{
        primaryStage.setScene(new Scene(createContent()));
        primaryStage.getScene().setOnKeyPressed(e -> {
            if (e.getCode() == KeyCode.LEFT) {
                //player.moveLeft();
                moveLeft = true;
                moveRight = false;
            } else if (e.getCode() == KeyCode.RIGHT) {
                moveRight = true;
                moveLeft = false;
                //player.moveRight();
            }
        });

        primaryStage.getScene().setOnKeyReleased(e -> {
            if (e.getCode() == KeyCode.LEFT) {
                moveLeft = false;
            } else if (e.getCode() == KeyCode.RIGHT) {
                moveRight = false;
            }
        });

        primaryStage.show();
    }


    public static void main(String[] args) {
        launch(args);
    }
}

